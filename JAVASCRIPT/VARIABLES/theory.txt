## 1. What is a Variable?

A **variable** is a container for storing data values. In JavaScript, variables can be declared using:

* `var` – older, function-scoped
* `let` – newer, block-scoped
* `const` – newer, block-scoped and read-only

---

## 2. Declaring Variables

### Using `let`

Use `let` when the value **may change**.

```javascript
let age = 25;
age = 30; // allowed
```

### Using `const`

Use `const` when the value **should not change**.

```javascript
const pi = 3.14;
pi = 3.14159; // Error: Assignment to constant variable
```

### Using `var`

`var` is the old way and should generally be avoided in modern code.

```javascript
var city = "Delhi";
city = "Mumbai"; // allowed
```

---

## 3. Differences Between `var`, `let`, and `const`

| Feature          | `var`           | `let`                 | `const`               |
| ---------------- | --------------- | --------------------- | --------------------- |
| Scope            | Function scope  | Block scope           | Block scope           |
| Re-declaration   | Allowed         | Not allowed           | Not allowed           |
| Re-assignment    | Allowed         | Allowed               | Not allowed           |
| Hoisting         | Yes (undefined) | Yes (not initialized) | Yes (not initialized) |
| Use in modern JS | Avoid           | Preferred             | Use for constants     |

---

## 4. Variable Naming Rules

JavaScript variable names:

1. Must begin with a **letter**, **underscore `_`**, or **dollar sign `$`**
2. Can contain **letters**, **digits**, **underscores**, and **dollar signs**
3. **Cannot** use reserved keywords (`let`, `function`, `var`, etc.)
4. **Case-sensitive** (`Name` and `name` are different)

### Valid Names

```javascript
let firstName;
let _count;
let $totalAmount;
```

### Invalid Names

```javascript
let 1stName;     // starts with a number
let let;         // reserved word
```

---

## 5. Variable Naming Conventions

Use **camelCase** for variables:

```javascript
let userName;
let totalPrice;
let isLoggedIn;
```

Use **UPPER_CASE** for constants:

```javascript
const MAX_USERS = 100;
const BASE_URL = "https://api.example.com";
```

---

## 6. Variable Scope

Scope defines where the variable is accessible.

### a. Global Scope

Declared outside any block or function – accessible everywhere.

```javascript
let globalVar = "I am global";

function greet() {
  console.log(globalVar); // Accessible
}
```

### b. Function Scope (`var`)

Declared with `var` inside a function – only available within that function.

```javascript
function showMessage() {
  var message = "Hello";
  console.log(message);
}

console.log(message); // Error: message is not defined
```

### c. Block Scope (`let`, `const`)

Declared inside `{}` – only accessible within that block.

```javascript
{
  let blockVar = "I am block scoped";
  const blockConst = 100;
  console.log(blockVar); // Accessible
}

console.log(blockVar); // Error: blockVar is not defined
```

---

## 7. Re-declaration and Re-assignment

### With `var`

```javascript
var x = 10;
var x = 20; // Allowed
```

### With `let`

```javascript
let y = 10;
let y = 20; // Error: Already declared
y = 30;     // Allowed (re-assignment)
```

### With `const`

```javascript
const z = 5;
z = 10;    // Error: Cannot reassign
const z = 15; // Error: Cannot re-declare
```

---

## 8. Hoisting

JavaScript **hoists** variable declarations to the top of their scope.

### With `var`

```javascript
console.log(a); // undefined
var a = 10;
```

### With `let` and `const`

```javascript
console.log(b); // ReferenceError
let b = 20;
```

Variables declared with `let` and `const` are hoisted but **not initialized**, causing a **Temporal Dead Zone (TDZ)** error if accessed before declaration.

---

## Summary

* Use `let` for variables that can change.
* Use `const` for constants that should not change.
* Avoid using `var` in modern JavaScript.
* Understand variable scope: global, function, and block.
* Follow consistent naming rules and camelCase style.
* Be careful with hoisting, especially with `var`.

---